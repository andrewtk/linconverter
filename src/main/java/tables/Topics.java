/*
 * This file is generated by jOOQ.
*/
package lorgNew.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import lorgNew.Indexes;
import lorgNew.Keys;
import lorgNew.Lorgnew;
import lorgNew.tables.records.TopicsRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Topics extends TableImpl<TopicsRecord> {

    private static final long serialVersionUID = 373808465;

    /**
     * The reference instance of <code>lorgNew.topics</code>
     */
    public static final Topics TOPICS = new Topics();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TopicsRecord> getRecordType() {
        return TopicsRecord.class;
    }

    /**
     * The column <code>lorgNew.topics.id</code>.
     */
    public final TableField<TopicsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>lorgNew.topics.topic</code>.
     */
    public final TableField<TopicsRecord, String> TOPIC = createField("topic", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>lorgNew.topics.content</code>.
     */
    public final TableField<TopicsRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>lorgNew.topics.slug</code>.
     */
    public final TableField<TopicsRecord, String> SLUG = createField("slug", org.jooq.impl.SQLDataType.VARCHAR(80).nullable(false), this, "");

    /**
     * The column <code>lorgNew.topics.cropic</code>.
     */
    public final TableField<TopicsRecord, String> CROPIC = createField("cropic", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>lorgNew.topics.segment</code>.
     */
    public final TableField<TopicsRecord, String> SEGMENT = createField("segment", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>lorgNew.topics.status</code>.
     */
    public final TableField<TopicsRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>lorgNew.topics.created</code>.
     */
    public final TableField<TopicsRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>lorgNew.topics.updated</code>.
     */
    public final TableField<TopicsRecord, Timestamp> UPDATED = createField("updated", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>lorgNew.topics</code> table reference
     */
    public Topics() {
        this(DSL.name("topics"), null);
    }

    /**
     * Create an aliased <code>lorgNew.topics</code> table reference
     */
    public Topics(String alias) {
        this(DSL.name(alias), TOPICS);
    }

    /**
     * Create an aliased <code>lorgNew.topics</code> table reference
     */
    public Topics(Name alias) {
        this(alias, TOPICS);
    }

    private Topics(Name alias, Table<TopicsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Topics(Name alias, Table<TopicsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Lorgnew.LORGNEW;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TOPICS_PRIMARY, Indexes.TOPICS_UNIQ_91F64639989D9B62);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TopicsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TOPICS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TopicsRecord> getPrimaryKey() {
        return Keys.KEY_TOPICS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TopicsRecord>> getKeys() {
        return Arrays.<UniqueKey<TopicsRecord>>asList(Keys.KEY_TOPICS_PRIMARY, Keys.KEY_TOPICS_UNIQ_91F64639989D9B62);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Topics as(String alias) {
        return new Topics(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Topics as(Name alias) {
        return new Topics(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Topics rename(String name) {
        return new Topics(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Topics rename(Name name) {
        return new Topics(name, null);
    }
}
