/*
 * This file is generated by jOOQ.
*/
package lorgNew.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import lorgNew.Indexes;
import lorgNew.Keys;
import lorgNew.Lorgnew;
import lorgNew.tables.records.QuestionsRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Questions extends TableImpl<QuestionsRecord> {

    private static final long serialVersionUID = 1030526753;

    /**
     * The reference instance of <code>lorgNew.questions</code>
     */
    public static final Questions QUESTIONS = new Questions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuestionsRecord> getRecordType() {
        return QuestionsRecord.class;
    }

    /**
     * The column <code>lorgNew.questions.id</code>.
     */
    public final TableField<QuestionsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>lorgNew.questions.userid</code>.
     */
    public final TableField<QuestionsRecord, Integer> USERID = createField("userid", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>lorgNew.questions.title</code>.
     */
    public final TableField<QuestionsRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>lorgNew.questions.content</code>.
     */
    public final TableField<QuestionsRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>lorgNew.questions.views</code>.
     */
    public final TableField<QuestionsRecord, Integer> VIEWS = createField("views", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>lorgNew.questions.slug</code>.
     */
    public final TableField<QuestionsRecord, String> SLUG = createField("slug", org.jooq.impl.SQLDataType.VARCHAR(90), this, "");

    /**
     * The column <code>lorgNew.questions.status</code>.
     */
    public final TableField<QuestionsRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>lorgNew.questions.mailme</code>.
     */
    public final TableField<QuestionsRecord, Byte> MAILME = createField("mailme", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>lorgNew.questions.segment</code>.
     */
    public final TableField<QuestionsRecord, String> SEGMENT = createField("segment", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>lorgNew.questions.created</code>.
     */
    public final TableField<QuestionsRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>lorgNew.questions.updated</code>.
     */
    public final TableField<QuestionsRecord, Timestamp> UPDATED = createField("updated", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>lorgNew.questions</code> table reference
     */
    public Questions() {
        this(DSL.name("questions"), null);
    }

    /**
     * Create an aliased <code>lorgNew.questions</code> table reference
     */
    public Questions(String alias) {
        this(DSL.name(alias), QUESTIONS);
    }

    /**
     * Create an aliased <code>lorgNew.questions</code> table reference
     */
    public Questions(Name alias) {
        this(alias, QUESTIONS);
    }

    private Questions(Name alias, Table<QuestionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Questions(Name alias, Table<QuestionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Lorgnew.LORGNEW;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.QUESTIONS_IDX_8ADC54D5F132696E, Indexes.QUESTIONS_PRIMARY, Indexes.QUESTIONS_UNIQ_8ADC54D5989D9B62);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<QuestionsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_QUESTIONS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<QuestionsRecord> getPrimaryKey() {
        return Keys.KEY_QUESTIONS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<QuestionsRecord>> getKeys() {
        return Arrays.<UniqueKey<QuestionsRecord>>asList(Keys.KEY_QUESTIONS_PRIMARY, Keys.KEY_QUESTIONS_UNIQ_8ADC54D5989D9B62);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Questions as(String alias) {
        return new Questions(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Questions as(Name alias) {
        return new Questions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Questions rename(String name) {
        return new Questions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Questions rename(Name name) {
        return new Questions(name, null);
    }
}
