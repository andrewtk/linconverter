/*
 * This file is generated by jOOQ.
*/
package lorgNew.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import lorgNew.Indexes;
import lorgNew.Keys;
import lorgNew.Lorgnew;
import lorgNew.tables.records.AnswersRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Answers extends TableImpl<AnswersRecord> {

    private static final long serialVersionUID = -2033713185;

    /**
     * The reference instance of <code>lorgNew.answers</code>
     */
    public static final Answers ANSWERS = new Answers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnswersRecord> getRecordType() {
        return AnswersRecord.class;
    }

    /**
     * The column <code>lorgNew.answers.id</code>.
     */
    public final TableField<AnswersRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>lorgNew.answers.qsid</code>.
     */
    public final TableField<AnswersRecord, Integer> QSID = createField("qsid", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>lorgNew.answers.userid</code>.
     */
    public final TableField<AnswersRecord, Integer> USERID = createField("userid", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>lorgNew.answers.content</code>.
     */
    public final TableField<AnswersRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>lorgNew.answers.slug</code>.
     */
    public final TableField<AnswersRecord, String> SLUG = createField("slug", org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>lorgNew.answers.status</code>.
     */
    public final TableField<AnswersRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>lorgNew.answers.mailme</code>.
     */
    public final TableField<AnswersRecord, Byte> MAILME = createField("mailme", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>lorgNew.answers.created</code>.
     */
    public final TableField<AnswersRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>lorgNew.answers.updated</code>.
     */
    public final TableField<AnswersRecord, Timestamp> UPDATED = createField("updated", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>lorgNew.answers</code> table reference
     */
    public Answers() {
        this(DSL.name("answers"), null);
    }

    /**
     * Create an aliased <code>lorgNew.answers</code> table reference
     */
    public Answers(String alias) {
        this(DSL.name(alias), ANSWERS);
    }

    /**
     * Create an aliased <code>lorgNew.answers</code> table reference
     */
    public Answers(Name alias) {
        this(alias, ANSWERS);
    }

    private Answers(Name alias, Table<AnswersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Answers(Name alias, Table<AnswersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Lorgnew.LORGNEW;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ANSWERS_IDX_50D0C6065A90BB43, Indexes.ANSWERS_IDX_50D0C606F132696E, Indexes.ANSWERS_PRIMARY, Indexes.ANSWERS_UNIQ_50D0C606989D9B62);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AnswersRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ANSWERS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AnswersRecord> getPrimaryKey() {
        return Keys.KEY_ANSWERS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AnswersRecord>> getKeys() {
        return Arrays.<UniqueKey<AnswersRecord>>asList(Keys.KEY_ANSWERS_PRIMARY, Keys.KEY_ANSWERS_UNIQ_50D0C606989D9B62);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Answers as(String alias) {
        return new Answers(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Answers as(Name alias) {
        return new Answers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Answers rename(String name) {
        return new Answers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Answers rename(Name name) {
        return new Answers(name, null);
    }
}
