/*
 * This file is generated by jOOQ.
*/
package lorgNew.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import lorgNew.Indexes;
import lorgNew.Keys;
import lorgNew.Lorgnew;
import lorgNew.tables.records.LoggerRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Logger extends TableImpl<LoggerRecord> {

    private static final long serialVersionUID = 419693792;

    /**
     * The reference instance of <code>lorgNew.logger</code>
     */
    public static final Logger LOGGER = new Logger();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LoggerRecord> getRecordType() {
        return LoggerRecord.class;
    }

    /**
     * The column <code>lorgNew.logger.id</code>.
     */
    public final TableField<LoggerRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>lorgNew.logger.action</code>.
     */
    public final TableField<LoggerRecord, Integer> ACTION = createField("action", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>lorgNew.logger.userid</code>.
     */
    public final TableField<LoggerRecord, Integer> USERID = createField("userid", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>lorgNew.logger.answid</code>.
     */
    public final TableField<LoggerRecord, Integer> ANSWID = createField("answid", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>lorgNew.logger.qsid</code>.
     */
    public final TableField<LoggerRecord, Integer> QSID = createField("qsid", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>lorgNew.logger.comid</code>.
     */
    public final TableField<LoggerRecord, Integer> COMID = createField("comid", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>lorgNew.logger.user_susp_id</code>.
     */
    public final TableField<LoggerRecord, Integer> USER_SUSP_ID = createField("user_susp_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>lorgNew.logger.permitid</code>.
     */
    public final TableField<LoggerRecord, Integer> PERMITID = createField("permitid", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>lorgNew.logger.topicid</code>.
     */
    public final TableField<LoggerRecord, Integer> TOPICID = createField("topicid", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>lorgNew.logger.status</code>.
     */
    public final TableField<LoggerRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>lorgNew.logger.created</code>.
     */
    public final TableField<LoggerRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>lorgNew.logger.updated</code>.
     */
    public final TableField<LoggerRecord, Timestamp> UPDATED = createField("updated", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>lorgNew.logger</code> table reference
     */
    public Logger() {
        this(DSL.name("logger"), null);
    }

    /**
     * Create an aliased <code>lorgNew.logger</code> table reference
     */
    public Logger(String alias) {
        this(DSL.name(alias), LOGGER);
    }

    /**
     * Create an aliased <code>lorgNew.logger</code> table reference
     */
    public Logger(Name alias) {
        this(alias, LOGGER);
    }

    private Logger(Name alias, Table<LoggerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Logger(Name alias, Table<LoggerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Lorgnew.LORGNEW;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LOGGER_IDX_987E13F347CC8C92, Indexes.LOGGER_IDX_987E13F35A90BB43, Indexes.LOGGER_IDX_987E13F37764CE59, Indexes.LOGGER_IDX_987E13F382BCB078, Indexes.LOGGER_IDX_987E13F3C51A3009, Indexes.LOGGER_IDX_987E13F3DC823F27, Indexes.LOGGER_IDX_987E13F3F132696E, Indexes.LOGGER_IDX_987E13F3F43B111, Indexes.LOGGER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<LoggerRecord, Integer> getIdentity() {
        return Keys.IDENTITY_LOGGER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LoggerRecord> getPrimaryKey() {
        return Keys.KEY_LOGGER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LoggerRecord>> getKeys() {
        return Arrays.<UniqueKey<LoggerRecord>>asList(Keys.KEY_LOGGER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Logger as(String alias) {
        return new Logger(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Logger as(Name alias) {
        return new Logger(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Logger rename(String name) {
        return new Logger(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Logger rename(Name name) {
        return new Logger(name, null);
    }
}
