/*
 * This file is generated by jOOQ.
*/
package lorgNew.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import lorgNew.Indexes;
import lorgNew.Keys;
import lorgNew.Lorgnew;
import lorgNew.tables.records.ClosedRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Closed extends TableImpl<ClosedRecord> {

    private static final long serialVersionUID = 354317550;

    /**
     * The reference instance of <code>lorgNew.closed</code>
     */
    public static final Closed CLOSED = new Closed();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClosedRecord> getRecordType() {
        return ClosedRecord.class;
    }

    /**
     * The column <code>lorgNew.closed.id</code>.
     */
    public final TableField<ClosedRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>lorgNew.closed.userid</code>.
     */
    public final TableField<ClosedRecord, Integer> USERID = createField("userid", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>lorgNew.closed.qsid</code>.
     */
    public final TableField<ClosedRecord, Integer> QSID = createField("qsid", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>lorgNew.closed.duplicate</code>.
     */
    public final TableField<ClosedRecord, Byte> DUPLICATE = createField("duplicate", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>lorgNew.closed.original_slug</code>.
     */
    public final TableField<ClosedRecord, String> ORIGINAL_SLUG = createField("original_slug", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>lorgNew.closed.reason</code>.
     */
    public final TableField<ClosedRecord, String> REASON = createField("reason", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>lorgNew.closed.status</code>.
     */
    public final TableField<ClosedRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>lorgNew.closed.created</code>.
     */
    public final TableField<ClosedRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>lorgNew.closed.updated</code>.
     */
    public final TableField<ClosedRecord, Timestamp> UPDATED = createField("updated", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>lorgNew.closed</code> table reference
     */
    public Closed() {
        this(DSL.name("closed"), null);
    }

    /**
     * Create an aliased <code>lorgNew.closed</code> table reference
     */
    public Closed(String alias) {
        this(DSL.name(alias), CLOSED);
    }

    /**
     * Create an aliased <code>lorgNew.closed</code> table reference
     */
    public Closed(Name alias) {
        this(alias, CLOSED);
    }

    private Closed(Name alias, Table<ClosedRecord> aliased) {
        this(alias, aliased, null);
    }

    private Closed(Name alias, Table<ClosedRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Lorgnew.LORGNEW;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CLOSED_IDX_4C74DE45A90BB43, Indexes.CLOSED_IDX_4C74DE4F132696E, Indexes.CLOSED_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ClosedRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CLOSED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ClosedRecord> getPrimaryKey() {
        return Keys.KEY_CLOSED_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ClosedRecord>> getKeys() {
        return Arrays.<UniqueKey<ClosedRecord>>asList(Keys.KEY_CLOSED_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Closed as(String alias) {
        return new Closed(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Closed as(Name alias) {
        return new Closed(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Closed rename(String name) {
        return new Closed(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Closed rename(Name name) {
        return new Closed(name, null);
    }
}
